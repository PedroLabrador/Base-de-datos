/*
    Integrantes:
    Pedro Labrador
    Kevin Cortes
    Armando Ortuño
*/

SET SERVEROUTPUT ON;
--  1. CONSULTAS
/*
  1. Personas cuyo grupo familiar es de un solo integrante.
     8 resultados.
*/
SELECT * 
FROM PERSONAS p
JOIN (SELECT FAMILIARES_ID id
      FROM PERSONAS pe 
      JOIN FAMILIARES f ON pe.FAMILIARES_ID = f.ID
      GROUP BY FAMILIARES_ID
      HAVING COUNT(FAMILIARES_ID) = 1) o
ON o.ID = p.FAMILIARES_ID;

/*
  2. Empleados que trabajan en el hospital y tienen seguro de vida.
     4 resultados.
*/
SELECT p.CORREO, p.APELLIDO, p.NOMBRE, p.GENERO, c.AREA, e.SUELDO, c.TIPO_CARGO, DECODE(c.SEGURO, 1, 
                                                                                                 'Si', 'No')
FROM PERSONAS p
JOIN EMPLEADOS e ON e.PERSONAS_ID = p.ID
JOIN CARGOS c ON e.CARGOS_ID = c.ID
WHERE c.AREA = 'Hospital' AND c.SEGURO = 1;

/*
  3. Historial de registros completo.
     83 resultados.
*/
SELECT r.MOTIVO, r.COSTO, r.FECHA, 'Servicio' "Tipo", s.nombre "Servicio", s.PORCENTAJE "Porcentaje", ' ' "Nombre", ' ' "Genero"
FROM SERVICIOS_REGISTROS sr
JOIN REGISTROS r on sr.registros_id = r.id
JOIN SERVICIOS s on sr.servicios_id = s.id
UNION
SELECT r.MOTIVO, r.COSTO, r.FECHA, 'Cliente' "Cliente", ' ' "Servicio", 0 "Porcentaje", p.NOMBRE || ' ' || p.APELLIDO "Nombre", p.GENERO "Genero"  
FROM CLIENTES cl
JOIN REGISTROS r on cl.registros_id = r.id
JOIN PERSONAS p on cl.personas_id  = p.id;

/* 
  4. Horarios de todos los empleados.
     10 resultados.
*/
SELECT p.APELLIDO, p.CORREO, e.SUELDO, TO_CHAR(h.HORA_SALIDA, 'HH:MI:SS') "Hora de salida", TO_CHAR(h.hora_entrada, 'HH:MI:SS') "Hora de entrada"
FROM TURNOS t
JOIN empleados e ON t.empleados_id = e.ID
JOIN PERSONAS p ON e.PERSONAS_ID = p.ID
JOIN HORARIOS h ON t.HORARIOS_ID = h.ID;

/*
  5. Familia/s con la mayor cantidad de puntos acumulados.
     40 resultados.
*/
SELECT p.FAMILIARES_ID "Grupo familiar", p.NOMBRE, p.APELLIDO, p.TELEFONO, f.PUNTOS
FROM PERSONAS p
JOIN FAMILIARES f ON p.FAMILIARES_ID = f.ID
WHERE f.PUNTOS = (SELECT MAX(PUNTOS) FROM FAMILIARES);

/*
  6. Todas las citas registradas entre personas empleadas / no empleadas.
     20 resultados.
*/
SELECT CITAS_ID, NOMBRE "NOMBRE/SERVICIO", FECHA, 'Cliente' TIPO 
FROM PACIENTES pa
JOIN PERSONAS pe ON pa.PERSONAS_ID = pe.ID
JOIN CITAS ci ON pa.CITAS_ID = ci.ID
UNION
SELECT CITAS_ID, NOMBRE "NOMBRE/SERVICIO", FECHA, 'Empleado' TIPO
FROM ATENDEDORES ate
JOIN EMPLEADOS em ON ate.EMPLEADOS_ID = em.ID
JOIN PERSONAS pe ON em.PERSONAS_ID = pe.ID
JOIN CITAS ci ON ate.CITAS_ID = ci.ID;

/*
  7. Lista de empleados masculinos, que desarrollan un servicio y los subservicios que ocupa.
     1 resultado.
*/
SELECT e.CARGOS_AREA, s.NOMBRE "SERVICIO", ss.NOMBRE "Subservicio", COUNT(*) "SUBSERVICIOS DEL SERVICIO", es.TIPO_ESPECIALIDAD "ESPECIALIDAD", p.NOMBRE "NOMBRE" 
FROM EMPLEADOS e
JOIN SERVICIOS s ON s.ID = e.SERVICIOS_ID
JOIN SUBSERVICIOS ss ON ss.SERVICIOS_ID = s.ID
JOIN ESPECIALIDADES es ON e.ESPECIALIDADES_ID = es.ID
JOIN PERSONAS p ON e.PERSONAS_ID = p.ID
WHERE p.GENERO = 'male'
GROUP BY e.CARGOS_AREA, s.NOMBRE, ss.NOMBRE, es.TIPO_ESPECIALIDAD, p.NOMBRE;

/*
  8. Donantes universales.
     8 resultados.
*/
SELECT CORREO, APELLIDO, NOMBRE, FECHA_NACIMIENTO, GENERO, DIRECCION, TIPO_SANGRE
FROM PERSONAS
WHERE TIPO_SANGRE = 'O-';

/*
  9. Empleados que tienen bonos.
     0 resultados.
*/
SELECT pe.NOMBRE, pe.APELLIDO, TIPO_CARGO, AREA, SEGURO, SUELDO FROM EMPLEADOS em
JOIN CARGOS ca ON em.CARGOS_ID = ca.ID
JOIN PERSONAS pe ON pe.ID = em.PERSONAS_ID
WHERE ca.BONO = 1;

/*
  10. Cantidad de personas sin seguro de vida y que sean voluntarios o becarios.
      2 resultados.
*/
SELECT AREA, TIPO_CARGO, APELLIDO, NOMBRE FROM CARGOS ca
JOIN EMPLEADOS em ON ca.ID = em.CARGOS_ID
JOIN PERSONAS pe ON em.PERSONAS_ID = pe.ID
WHERE ca.SEGURO = 0 AND ca.TIPO_CARGO IN ('Voluntario', 'Becario');

--  2. PL/SQL
-- FUNCION QUE CALCULA EL DESCUENTO DEL COSTO DE UN SERVICIO
CREATE OR REPLACE FUNCTION DESCUENTO
  (T_EMPLEADOS_ID IN EMPLEADOS.ID%TYPE,
   T_REGISTROS_ID IN REGISTROS.COSTO%TYPE)
RETURN NUMBER 
IS
  V_COSTO      REGISTROS.COSTO%TYPE;
  V_PORCENTAJE SERVICIOS.PORCENTAJE%TYPE;
BEGIN
  SELECT COSTO 
  INTO V_COSTO
  FROM PERSONAL  pe
  JOIN EMPLEADOS em ON pe.EMPLEADOS_ID = em.ID
  JOIN REGISTROS re ON pe.REGISTROS_ID = re.ID
  WHERE EMPLEADOS_ID = T_EMPLEADOS_ID AND REGISTROS_ID = T_REGISTROS_ID;
  
  SELECT se.PORCENTAJE
  INTO V_PORCENTAJE
  FROM EMPLEADOS em
  JOIN SERVICIOS se ON em.SERVICIOS_ID = se.ID
  WHERE em.ID = T_EMPLEADOS_ID;
  
  RETURN V_COSTO * (V_PORCENTAJE / 100);
END DESCUENTO;
/
-- DROP FUNCTION DESCUENTO;

-- EJEMPLO DE PRUEBA

/*
SELECT SUELDO, MOTIVO, COSTO - DESCUENTO(em.ID, re.ID) "TOTAL CON DESCUENTO", FECHA
FROM PERSONAL pe
JOIN EMPLEADOS em ON pe.EMPLEADOS_ID = em.ID
JOIN REGISTROS re ON pe.REGISTROS_ID = re.ID;

-- 12 RESULTADOS.
*/

-- PROCEDIMIENTO QUE CHEQUEA LAS PERSONAS QUE PUEDEN JUBILARSE
CREATE OR REPLACE PROCEDURE REVISAR_JUBILACIONES 
IS
  CURSOR CUR_PER IS
    SELECT * FROM PERSONAS pe JOIN EMPLEADOS em ON pe.ID = em.PERSONAS_ID;
BEGIN
  FOR PERSONA IN CUR_PER LOOP
    IF (TO_CHAR(SYSDATE, 'YYYY') - TO_CHAR(PERSONA.FECHA_NACIMIENTO, 'YYYY')) >= 60 THEN
      DBMS_OUTPUT.PUT_LINE(PERSONA.NOMBRE || ' ' || PERSONA.APELLIDO || ' puede jubilarse :)');
    END IF;
  END LOOP;
END REVISAR_JUBILACIONES;
/
-- DROP PROCEDURE REVISAR_JUBILACIONES;

-- EJEMPLO DE PRUEBA

/*
EXECUTE REVISAR_JUBILACIONES;

-- 1 RESULTADO.
*/

-- CREACION DE LA TABLA BITACORA
CREATE TABLE BITACORA (
  NOMBRE VARCHAR2(40) NOT NULL,
  OPERACION VARCHAR2(20) NOT NULL,
  USUARIO VARCHAR2(40) NOT NULL,
  FECHA VARCHAR2(35) NOT NULL,
  DATOS VARCHAR2(120) NOT NULL);
-- DROP TABLE BITACORA;

CREATE OR REPLACE TRIGGER ANADIR_BITACORA
BEFORE DELETE OR UPDATE OR INSERT ON PERSONAS FOR EACH ROW
BEGIN
    IF INSERTING THEN
        INSERT INTO BITACORA VALUES ('PERSONAS', 'INSERT', USER, SYSDATE, :NEW.ID || ' ' || :NEW.CORREO || ' ' || :NEW.TELEFONO || ' ' || :NEW.DIRECCION);
    ELSIF UPDATING THEN
        INSERT INTO BITACORA VALUES ('PERSONAS', 'UPDATE', USER, SYSDATE, :NEW.ID || ' ' || :NEW.CORREO || ' ' || :NEW.TELEFONO || ' ' || :NEW.DIRECCION);
    ELSIF DELETING THEN
        INSERT INTO BITACORA VALUES ('PERSONAS', 'DELETE', USER, SYSDATE, :OLD.ID || ' ' || :OLD.CORREO || ' ' || :OLD.TELEFONO || ' ' || :OLD.DIRECCION);
    END IF;
END;
/
-- DROP TRIGGER ANADIR_BITACORA;

-- PRUEBAS
/*
INSERT INTO PERSONAS VALUES(41, 'test@test.com', 20, 'test', 'test', sysdate, '000-000-0000', 'unknown', 'test', 'U');
UPDATE PERSONAS SET DIRECCION = 'unknown address' WHERE ID = 41;
DELETE FROM PERSONAS WHERE ID = 41;

SELECT * FROM PERSONAS;
SELECT * FROM BITACORA;

-- 3 REGISTROS.
*/